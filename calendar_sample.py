"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""
import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging
import csv
import requests
import msal


# Optional logging
# logging.basicConfig(level=logging.DEBUG)

config = json.load(open(sys.argv[1]))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    config["client_id"], authority=config["authority"],
    client_credential=config["secret"],
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:
    # Calling graph to get all users
    users_endpoint = "https://graph.microsoft.com/v1.0/users"
    users_data = requests.get(
        users_endpoint,
        headers={'Authorization': 'Bearer ' + result['access_token']}
    ).json()
    
    if "value" in users_data:
        all_calendar_data = []
        for user in users_data["value"]:
            user_id = user["id"]
            calendar_endpoint = f"https://graph.microsoft.com/v1.0/users/{user_id}/calendar/events"
            calendar_data = requests.get(
                calendar_endpoint,
                headers={'Authorization': 'Bearer ' + result['access_token']}
            ).json()
            for event in calendar_data.get('value', []):
                all_calendar_data.append({
                    "user_id": user["id"],
                    "user_display_name": user["displayName"],
                    "event_subject": event.get("subject"),
                    "event_start": event.get("start", {}).get("dateTime"),
                    "event_end": event.get("end", {}).get("dateTime"),
                    "event_location": event.get("location", {}).get("displayName"),
                    "event_organizer": event.get("organizer", {}).get("emailAddress", {}).get("name")
                })
        
        # Save the data to a CSV file
        csv_file = "all_users_calendar_data.csv"
        with open(csv_file, mode='w', encoding='utf-8', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=[
                "user_id", "user_display_name", "event_subject", 
                "event_start", "event_end", "event_location", "event_organizer"])
            writer.writeheader()
            writer.writerows(all_calendar_data)
        
        print(f"All users' calendar data has been saved to {csv_file}")
    else:
        print("Error retrieving users")
        print(users_data)
else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug
